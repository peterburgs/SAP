type User
  @model
  @auth(rules: [ {allow: owner, operations: [create, delete]} ]) {
  id: ID!
  email: String!
  username: String!
  projects: [ProjectParticipant] @connection(keyName: "byMember", fields: ["id"])
  avatarKey: String!
}

type Project
  @model
  @auth(rules: [ {allow: owner, operations: [create, update, delete]} ]) {
  id: ID!
  name: String!
  key: String!
  avatarKey: String!
  createdAt: AWSDateTime
  members: [ProjectParticipant] @connection(keyName: "byProject", fields: ["id"])
  # sprints: [Sprint] @connection(keyName: "byProject", fields: ["Id"])
}

type ProjectParticipant
  @model
  @key(name: "byProject", fields: ["projectID", "memberID"])
  @key(name: "byMember", fields: ["memberID", "projectID"])
  @auth(rules: [ {allow: owner, operations: [create, update, delete]} ]) {
  id: ID!
  projectID: ID!
  memberID: ID!
  role: Role!
  project: Project! @connection(fields: ["projectID"])
  member: User! @connection(fields: ["memberID"])
}

enum Role {
  PROJECT_LEADER
  TEAM_MEMBER
}

# type Sprint
#   @model
#   @key(name: "byProject", fields: ["projectID"])
#   @auth(rules: [{allow: owner}]) {
#   id: ID!
#   startDate: AWSDate!
#   endDate: AWSDate!
#   goal: String!
#   name: String!
#   isCompleted: Boolean!
#   isStarted: Boolean!
#   projectID: ID!
#   project: [Project] @connection(fields: ["projectID"])
# }

# type Task
#   @model {
#   id: ID!
#   name: String!
#   label: String!
#   description: String!
#   priority: Int!
#   status: String!
#   storyPoint: Int!
# }
